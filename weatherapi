import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;

import org.json.JSONArray;
import org.json.JSONObject;

public class jsonproject {

    private static final String API_URL = "https://samples.openweathermap.org/data/2.5/forecast/hourly?q=London,us&appid=b6907d289e10d714a6e88b30761fae22";

    public static String fetchWeatherData() throws IOException {
        URL url = new URL(API_URL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");

        StringBuilder response = new StringBuilder();
        try (Scanner scanner = new Scanner(conn.getInputStream())) {
            while (scanner.hasNextLine()) {
                response.append(scanner.nextLine());
            }
        }
        return response.toString();
    }

    public static double getWeatherByDate(String weatherData, String date) {
        JSONObject jsonObject = new JSONObject(weatherData);
        JSONArray list = jsonObject.getJSONArray("list");
        for (int i = 0; i < list.length(); i++) {
            JSONObject item = list.getJSONObject(i);
            if (item.getString("dt_txt").equals(date)) {
                JSONObject main = item.getJSONObject("main");
                return main.getDouble("temp");
            }
        }
        return -1; // Indicate data not found
    }

    public static double getWindSpeedByDate(String weatherData, String date) {
        JSONObject jsonObject = new JSONObject(weatherData);
        JSONArray list = jsonObject.getJSONArray("list");
        for (int i = 0; i < list.length(); i++) {
            JSONObject item = list.getJSONObject(i);
            if (item.getString("dt_txt").equals(date)) {
                JSONObject wind = item.getJSONObject("wind");
                return wind.getDouble("speed");
            }
        }
        return -1; // Indicate data not found
    }

    public static double getPressureByDate(String weatherData, String date) {
        JSONObject jsonObject = new JSONObject(weatherData);
        JSONArray list = jsonObject.getJSONArray("list");
        for (int i = 0; i < list.length(); i++) {
            JSONObject item = list.getJSONObject(i);
            if (item.getString("dt_txt").equals(date)) {
                JSONObject main = item.getJSONObject("main");
                return main.getDouble("pressure");
            }
        }
        return -1; // Indicate data not found
    }

    public static void main(String[] args) {
        try {
            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.println("1. Get weather\n2. Get Wind Speed\n3. Get Pressure\n0. Exit");
                System.out.print("Enter your choice: ");
                int option = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character

                if (option == 0) {
                    System.out.println("Exiting the program.");
                    break;
                }

                System.out.print("Enter the date in the format 'YYYY-MM-DD HH:MM:SS': ");
                String date = scanner.nextLine();

                String weatherData = fetchWeatherData();

                switch (option) {
                    case 1:
                        double temp = getWeatherByDate(weatherData, date);
                        if (temp != -1) {
                            System.out.println("The temperature on " + date + " is " + temp + "Â°C");
                        } else {
                            System.out.println("Weather data not found for the given date.");
                        }
                        break;
                    case 2:
                        double windSpeed = getWindSpeedByDate(weatherData, date);
                        if (windSpeed != -1) {
                            System.out.println("The wind speed on " + date + " is " + windSpeed + " m/s");
                        } else {
                            System.out.println("Weather data not found for the given date.");
                        }
                        break;
                    case 3:
                        double pressure = getPressureByDate(weatherData, date);
                        if (pressure != -1) {
                            System.out.println("The pressure on " + date + " is " + pressure + " hPa");
                        } else {
                            System.out.println("Weather data not found for the given date.");
                        }
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                        break;
                }
            }

            scanner.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
